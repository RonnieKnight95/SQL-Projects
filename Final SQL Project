Questions from my final SQL project 



-- Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").
Select FirstName, LastName, CustomerId, Country
From chinook.customers
Where Country != 'USA';

--Show only the Customers from Brazil.

Select FirstName, LastName, CustomerId, Country
From chinook.customers
Where Country = 'Brazil';

--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
Select FirstName, LastName, InvoiceID, InvoiceDate, BillingCountry
From chinook.customers
Inner Join chinook.invoices
On chinook.customers.CustomerId = chinook.invoices.CustomerId
Where Country = 'Brazil';

--Show the Employees who are Sales Agents.
Select FirstName, LastName, Title
From chinook.employees
Where Title = 'Sales Support Agent';

--Find a unique/distinct list of billing countries from the Invoice table.
Select distinct BillingCountry
From chinook.invoices;


--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name. 
Select e.FirstName, e.LastName , i.InvoiceId
From employees e
Join customers c  
    on c.SupportRepId = e.EmployeeId
Join invoices i
    on i.CustomerId = c.CustomerId
Where i.InvoiceID IS NOT NULL;

--Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
Select e.FirstName as Employee_First_Name, e.LastName as Employee_Last_Name , i.InvoiceId, c.FirstName as Customer_First_Name, c.LastName as Customer_Last_Name, c.Country, i.Total
From employees e
Left Join customers c  
on c.SupportRepId = e.EmployeeId
Left Join invoices i
on i.CustomerId = c.CustomerId
Where i.InvoiceID IS NOT NULL;

--How many Invoices were there in 2009?
Select Count(InvoiceId) as InvoiceCount
From invoices
Where InvoiceDate LIKE '2009%';

--What are the total sales for 2009?
Select sum(Total) TotalSales_2009
From invoices
Where InvoiceDate LIKE '2009%';

--Write a query that includes the purchased track name with each invoice line ID.
Select t.name, InvoiceLineId
From tracks t
join chinook.invoice_items
    On t.TrackId = invoice_items.TrackId;

--Write a query that includes the purchased track name AND artist name with each invoice line ID.
Select t.name, InvoiceLineId, a.Name as Artist_Name
From tracks t
Inner join chinook.invoice_items
On t.TrackId = invoice_items.TrackId
Inner join chinook.albums al
On t.AlbumId = al.AlbumID
Inner Join chinook.artists a
On al.ArtistId =  a.ArtistId;

--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
Select t.Name as 'Track Name', Title as 'Album Name', m.Name as 'Media Type',g.Name as Genre
From chinook.tracks t
join chinook.albums a
on t.AlbumId = a.AlbumId
join chinook.genres g
on g.GenreId= t.GenreId
 join chinook.media_types m
on m.MediaTypeId = t.MediaTypeId;

-- Show the total sales made by each sales agent.
Select e.FirstName as 'First Name', e.LastName as 'Last Name', Sum(Total)
From chinook.employees e
Join customers c
    on e.EmployeeId = c.SupportRepId
join invoices i
    on i.CustomerId = c.CustomerId
Group by e.FirstName;

--Which sales agent made the most dollars in sales in 2009?
Select e.FirstName as 'First Name', e.LastName as 'Last Name',
Round(Sum(i.Total),2 ) as 'Total Sales'
From chinook.employees e
Join customers c
    on e.EmployeeId = c.SupportRepId
join invoices i
    on i.CustomerId = c.CustomerId
Where e.Title = 'Sales Support Agent' 
ANd i.InvoiceDate LIKE '2009%'
Group by e.FirstName
ORDER BY (round(sum(i.Total), 2))  DESC LIMIT 1;

--How much did each Genre earn
Select g.Name, 
Round(sum(i.Total),2) as 'Total Sales'
From genres g
Join tracks t
    on g.GenreID = t.GenreId
Join invoice_items 
    on t.TrackId = invoice_items.TrackId
join invoices i
    on i.invoiceId = invoice_items.InvoiceId
Group by g.Name;

--What MediaType does each Genre use the most.
SELECT GenreName, 
MediaTypeName, 
MediaTypeCount
FROM (
    SELECT 
    g.Name AS GenreName, 
        m.Name AS MediaTypeName, 
        COUNT(t.MediaTypeId) AS MediaTypeCount,
        RANK() OVER (PARTITION BY g.Name ORDER BY COUNT(t.MediaTypeId) DESC) AS rank
    FROM media_types m
    JOIN tracks t 
        ON m.MediaTypeId = t.MediaTypeId
    JOIN genres g 
        ON t.GenreID = g.GenreId
    GROUP BY g.Name, m.Name
) ranked
WHERE rank = 1;

--What Genres did each Customer prefer
SELECT 
    GenreName, 
    FirstName, 
    LastName
FROM (
    SELECT 
    g.Name AS GenreName,
    c.Firstname,
    c.LastName,        
        COUNT(t.GenreId) AS GenreTypeCount,
        RANK() OVER (PARTITION BY c.CustomerId ORDER BY COUNT(t.GenreID) DESC) AS rank
    FROM genres g
    JOIN tracks t 
        ON g.GenreId = t.GenreId
    Join invoice_items items 
        on t.TrackId = items.TrackId
    join invoices i 
        on items.invoiceID = i.invoiceId
    join customers c 
        on c.customerId = i.CustomerId
    GROUP BY g.Name, c.FirstName, c.LastName
) ranked
WHERE rank = 1;
